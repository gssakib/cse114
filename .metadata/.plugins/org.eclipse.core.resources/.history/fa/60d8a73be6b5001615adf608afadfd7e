import java.util.ArrayList;

public class Homework8Methods {
	// part 1
		public static int findTimes10(int[] nums) {
			int lower = 0;
			
			return findTimes10Helper(nums, lower);
		}

		
		
		public static int findTimes10Helper(int[] nums, int lower){
			
			if(lower+1 == nums.length ){
				
				return -1;
			}else if(10*nums[lower] != nums[lower + 1] ){
				
				return findTimes10Helper(nums, lower + 1);
			}else{
				
				return (lower);
			}
		
		}
		
		
		
		// part 2
		public static void replaceMult5(int[] nums, int newVal) {
			int lower = 0;
			replaceMult5Helper(nums, newVal, lower);
			
		}

		public static void replaceMult5Helper(int[] nums, int newVal, int lower){
			if(nums[lower] % 5 == 0 && (lower != nums.length - 1)){
				nums[lower] = newVal;
				
				replaceMult5Helper(nums, newVal, lower+1);
			}else if((lower != nums.length -1)){
				replaceMult5Helper(nums, newVal, lower+1);
			}else if((lower == nums.length -1) && nums[lower] % 5 == 0){
				nums[lower] = newVal;
			}
			
		}
		
		
		
		
		
		// part 3
		public static ArrayList<int[]> permuteArray(int[] array) {
			ArrayList<int[]> result = new ArrayList<int[]>();
			permute(array, 0, result);
			return result;
		}
		
		static void permute(int[] num, int start, ArrayList<int[]> result) {
			 
			if (start >= num.length) {
				int[] item = num;
				result.add(item);
			}
		 
			for (int j = start; j <= num.length - 1; j++) {
				swap(num, start, j);
				permute(num, start + 1, result);
				swap(num, start, j);
			}
		}
		 
		private ArrayList<Integer> convertArrayToList(int[] num) {
			ArrayList<Integer> item = new ArrayList<Integer>();
			for (int h = 0; h < num.length; h++) {
				item.add(num[h]);
			}
			return item;
		}
		 
		private static void swap(int[] a, int i, int j) {
			int temp = a[i];
			a[i] = a[j];
			a[j] = temp;
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		// part 4
		public static String[] mobius(String s1, String s2) {
			// fill this in
			return null;
		}

		// part 5
		public static int teddy(int initial, int goal, int increment) {
			// fill this in
			return -2;
		}
}
